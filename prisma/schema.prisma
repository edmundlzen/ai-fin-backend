generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String              @id @default(uuid())
  email                String              @unique
  password_hash        String
  username             String
  phone                String
  birth_year           Int
  level                Int                 @default(1)
  experience           Int                 @default(0)
  user_info            UserInfo?
  financial_goal       FinancialGoal[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  wallet               Wallet              @relation(fields: [wallet_id], references: [id])
  wallet_id            String              @unique
  news_topics_followed NewsTopic[]
  user_completed_task  UserCompletedTask[]
  claimedVoucher       ClaimedVoucher[]
}

model UserCompletedTask {
  userId      String
  taskId      String
  achieved    Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  lastClaimed DateTime?

  @@id([userId, taskId])
}

model Task {
  id                String              @id @default(uuid())
  title             String
  description       String
  points            Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  requiredAmount    Int
  type              TaskType
  timing            TaskTiming
  UserCompletedTask UserCompletedTask[]
}

enum TaskType {
  READING_ARTICLES
  ACHIEVING_FINANCIAL_GOALS
  SAVING_MONEY
}

enum TaskTiming {
  ONCE
  DAILY
  WEEKLY
  MONTHLY
}

model FinancialGoal {
  id                   String        @id @default(uuid())
  user                 User          @relation(fields: [userId], references: [id])
  userId               String
  emoji                String
  name                 String
  amount               Int
  months_to_reach_goal Int
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  transactions         Transaction[]
}

// Many to Many, one voucher can be used by many users and one user can use many vouchers
model Voucher {
  id             String           @id @default(uuid())
  name           String
  code           String
  terms          String
  levelRequired  Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  claimedVoucher ClaimedVoucher[]
}

model ClaimedVoucher {
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  voucherId String
  voucher   Voucher  @relation(fields: [voucherId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, voucherId])
}

model Wallet {
  id           String        @id @default(uuid())
  user         User?
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Transaction {
  id                String        @id @default(uuid())
  amount            Int
  wallet            Wallet        @relation(fields: [wallet_id], references: [id], onDelete: Cascade)
  wallet_id         String
  financial_goal    FinancialGoal @relation(fields: [financial_goal_id], references: [id], onDelete: Cascade)
  financial_goal_id String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model UserInfo {
  userId                     String                   @id @unique
  user                       User                     @relation(fields: [userId], references: [id])
  annual_income              AnnualIncome
  estimated_liabilities      EstimatedLiabilities
  estimated_monthly_expenses EstimatedMonthlyExpenses
  invested_before            Boolean
  risk_tolerance             RiskTolerance
  expected_annual_return     ExpectedAnnualReturn
  investment_horizon         InvestmentHorizon
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @updatedAt
}

enum NewsTopic {
  INVESTMENT
  FINANCE_LITERACY
  FINANCIAL
  COMPANY
}

enum AnnualIncome {
  LessThan10K
  From10KTo25K
  From25KTo50K
  From50KTo100K
  From100KTo200K
  MoreThan200K
}

enum EstimatedLiabilities {
  LessThan10K
  From10KTo25K
  From25KTo50K
  From50KTo100K
  From100KTo200K
  MoreThan200K
}

enum EstimatedMonthlyExpenses {
  LessThan1K
  From1KTo2K
  From2KTo3K
  From3KTo4K
  From4KTo5K
  MoreThan5K
}

enum RiskTolerance {
  Low
  Medium
  High
}

enum ExpectedAnnualReturn {
  LessThan5Percent
  From5To10Percent
  From10To15Percent
  MoreThan15Percent
}

enum InvestmentHorizon {
  LessThan1Year
  From1To3Years
  From3To5Years
  MoreThan5Years
}
